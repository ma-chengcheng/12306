// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/train/train.proto

package train

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Train service

func NewTrainEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client api for Train service

type TrainService interface {
	GetStationList(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListReply, error)
	SearchStation(ctx context.Context, in *SearchStationRequest, opts ...client.CallOption) (*SearchStationReply, error)
	GetScheduleList(ctx context.Context, in *GetScheduleListRequest, opts ...client.CallOption) (*GetScheduleListReply, error)
	GetStops(ctx context.Context, in *GetStopsRequest, opts ...client.CallOption) (*GetStopsReply, error)
}

type trainService struct {
	c    client.Client
	name string
}

func NewTrainService(name string, c client.Client) TrainService {
	return &trainService{
		c:    c,
		name: name,
	}
}

func (c *trainService) GetStationList(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListReply, error) {
	req := c.c.NewRequest(c.name, "Train.GetStationList", in)
	out := new(GetStationListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) SearchStation(ctx context.Context, in *SearchStationRequest, opts ...client.CallOption) (*SearchStationReply, error) {
	req := c.c.NewRequest(c.name, "Train.SearchStation", in)
	out := new(SearchStationReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) GetScheduleList(ctx context.Context, in *GetScheduleListRequest, opts ...client.CallOption) (*GetScheduleListReply, error) {
	req := c.c.NewRequest(c.name, "Train.GetScheduleList", in)
	out := new(GetScheduleListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) GetStops(ctx context.Context, in *GetStopsRequest, opts ...client.CallOption) (*GetStopsReply, error) {
	req := c.c.NewRequest(c.name, "Train.GetStops", in)
	out := new(GetStopsReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server api for Train service

type TrainHandler interface {
	GetStationList(context.Context, *GetStationListRequest, *GetStationListReply) error
	SearchStation(context.Context, *SearchStationRequest, *SearchStationReply) error
	GetScheduleList(context.Context, *GetScheduleListRequest, *GetScheduleListReply) error
	GetStops(context.Context, *GetStopsRequest, *GetStopsReply) error
}

func RegisterTrainHandler(s server.Server, hdlr TrainHandler, opts ...server.HandlerOption) error {
	type train interface {
		GetStationList(ctx context.Context, in *GetStationListRequest, out *GetStationListReply) error
		SearchStation(ctx context.Context, in *SearchStationRequest, out *SearchStationReply) error
		GetScheduleList(ctx context.Context, in *GetScheduleListRequest, out *GetScheduleListReply) error
		GetStops(ctx context.Context, in *GetStopsRequest, out *GetStopsReply) error
	}
	type Train struct {
		train
	}
	h := &trainHandler{hdlr}
	return s.Handle(s.NewHandler(&Train{h}, opts...))
}

type trainHandler struct {
	TrainHandler
}

func (h *trainHandler) GetStationList(ctx context.Context, in *GetStationListRequest, out *GetStationListReply) error {
	return h.TrainHandler.GetStationList(ctx, in, out)
}

func (h *trainHandler) SearchStation(ctx context.Context, in *SearchStationRequest, out *SearchStationReply) error {
	return h.TrainHandler.SearchStation(ctx, in, out)
}

func (h *trainHandler) GetScheduleList(ctx context.Context, in *GetScheduleListRequest, out *GetScheduleListReply) error {
	return h.TrainHandler.GetScheduleList(ctx, in, out)
}

func (h *trainHandler) GetStops(ctx context.Context, in *GetStopsRequest, out *GetStopsReply) error {
	return h.TrainHandler.GetStops(ctx, in, out)
}
